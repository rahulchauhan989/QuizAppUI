// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using QuizApp.Domain.DataContext;

#nullable disable

namespace QuizApp.Web.Migrations
{
    [DbContext(typeof(QuizAppContext))]
    [Migration("20250623180912_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("QuizApp.Domain.DataModels.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CategoryId"));

                    b.Property<DateTime?>("Createdat")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Createdby")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool?>("Isdeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("Modifiedat")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Updatedby")
                        .HasColumnType("integer");

                    b.HasKey("CategoryId");

                    b.HasIndex("Createdby");

                    b.HasIndex("Updatedby");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("QuizApp.Domain.DataModels.Option", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Createdat")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Iscorrect")
                        .HasColumnType("boolean");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Options");
                });

            modelBuilder.Entity("QuizApp.Domain.DataModels.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("QuestionId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Createdat")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Createdby")
                        .HasColumnType("integer");

                    b.Property<string>("Difficulty")
                        .HasColumnType("text");

                    b.Property<bool?>("Isdeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("Marks")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updatedat")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("Updatedby")
                        .HasColumnType("integer");

                    b.Property<int?>("UpdaterUserId")
                        .HasColumnType("integer");

                    b.HasKey("QuestionId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Createdby");

                    b.HasIndex("UpdaterUserId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("QuizApp.Domain.DataModels.Quiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Createdat")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Createdby")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("Durationminutes")
                        .HasColumnType("integer");

                    b.Property<bool?>("Isdeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("Ispublic")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("Modifiedat")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Totalmarks")
                        .HasColumnType("integer");

                    b.Property<int?>("Updatedby")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Createdby");

                    b.HasIndex("Updatedby");

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("QuizApp.Domain.DataModels.Quizquestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Createdat")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer");

                    b.Property<int>("QuizId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("QuizId");

                    b.ToTable("Quizquestions");
                });

            modelBuilder.Entity("QuizApp.Domain.DataModels.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<DateTime?>("Createdat")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool?>("Isactive")
                        .HasColumnType("boolean");

                    b.Property<string>("Passwordhash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("QuizApp.Domain.DataModels.Useranswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Iscorrect")
                        .HasColumnType("boolean");

                    b.Property<int>("OptionId")
                        .HasColumnType("integer");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer");

                    b.Property<int>("UserquizattemptId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OptionId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserquizattemptId");

                    b.ToTable("Useranswers");
                });

            modelBuilder.Entity("QuizApp.Domain.DataModels.Userquizattempt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EndAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Issubmitted")
                        .HasColumnType("boolean");

                    b.Property<int>("QuizId")
                        .HasColumnType("integer");

                    b.Property<int>("Score")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Startend")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Timespent")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("QuizId");

                    b.HasIndex("UserId");

                    b.ToTable("Userquizattempts");
                });

            modelBuilder.Entity("QuizApp.Domain.DataModels.Category", b =>
                {
                    b.HasOne("QuizApp.Domain.DataModels.User", "Creator")
                        .WithMany()
                        .HasForeignKey("Createdby")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizApp.Domain.DataModels.User", "Updater")
                        .WithMany()
                        .HasForeignKey("Updatedby");

                    b.Navigation("Creator");

                    b.Navigation("Updater");
                });

            modelBuilder.Entity("QuizApp.Domain.DataModels.Option", b =>
                {
                    b.HasOne("QuizApp.Domain.DataModels.Question", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizApp.Domain.DataModels.Question", b =>
                {
                    b.HasOne("QuizApp.Domain.DataModels.Category", "category")
                        .WithMany("Questions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizApp.Domain.DataModels.User", "Creator")
                        .WithMany()
                        .HasForeignKey("Createdby")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizApp.Domain.DataModels.User", "Updater")
                        .WithMany()
                        .HasForeignKey("UpdaterUserId");

                    b.Navigation("Creator");

                    b.Navigation("Updater");

                    b.Navigation("category");
                });

            modelBuilder.Entity("QuizApp.Domain.DataModels.Quiz", b =>
                {
                    b.HasOne("QuizApp.Domain.DataModels.Category", "Category")
                        .WithMany("Quizzes")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizApp.Domain.DataModels.User", "Creator")
                        .WithMany()
                        .HasForeignKey("Createdby")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizApp.Domain.DataModels.User", "Updater")
                        .WithMany()
                        .HasForeignKey("Updatedby");

                    b.Navigation("Category");

                    b.Navigation("Creator");

                    b.Navigation("Updater");
                });

            modelBuilder.Entity("QuizApp.Domain.DataModels.Quizquestion", b =>
                {
                    b.HasOne("QuizApp.Domain.DataModels.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizApp.Domain.DataModels.Quiz", "Quiz")
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("QuizApp.Domain.DataModels.Useranswer", b =>
                {
                    b.HasOne("QuizApp.Domain.DataModels.Option", "Option")
                        .WithMany()
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizApp.Domain.DataModels.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizApp.Domain.DataModels.Userquizattempt", "Attempt")
                        .WithMany("Useranswers")
                        .HasForeignKey("UserquizattemptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attempt");

                    b.Navigation("Option");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizApp.Domain.DataModels.Userquizattempt", b =>
                {
                    b.HasOne("QuizApp.Domain.DataModels.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizApp.Domain.DataModels.Quiz", "Quiz")
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizApp.Domain.DataModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Quiz");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizApp.Domain.DataModels.Category", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("Quizzes");
                });

            modelBuilder.Entity("QuizApp.Domain.DataModels.Question", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("QuizApp.Domain.DataModels.Userquizattempt", b =>
                {
                    b.Navigation("Useranswers");
                });
#pragma warning restore 612, 618
        }
    }
}
